package Aufgaben;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

public class ViewEast extends JPanel {
	private ControlModel c;
	private static ViewEast instance = null;
	private JTable table; // Direction
	private JTable table1; // Gear
	private JTable table2; // Pause
	private JTable table3; // Repitition
	private JScrollPane jcp;

	public ViewEast() {
		this.setLayout(new BorderLayout());
		JButton b = new JButton("Test");
		JButton save = new JButton("Save");
		this.add(b, BorderLayout.NORTH);
		// this.add(b);
		this.add(save, BorderLayout.SOUTH);

		this.c = ControlModel.getInstance();

		String[][] str = new String[][] { { "", "" } };
		String[] tmp = new String[] { "", "" };
		this.table = new JTable(str, tmp);
		this.jcp = new JScrollPane(table);
		this.add(jcp);

		ViewMiddle.getInstance().getTable().addMouseListener(new MouseListener() {

			public void mouseClicked(MouseEvent a) {
				System.out.println(ViewMiddle.getInstance().getTable().getSelectedRow());
				System.out.println(c.getControlProcess().get(c.getClm().getSelectedRow()).toString());
				String[] parts = c.getControlProcess().get(c.getClm().getSelectedRow()).toString().split(":");

				Command com = c.getControlProcess().get(c.getClm().getSelectedRow());
				System.out.println("das ist die ausgabe" + com.getName());

				switch (com.getName()) {
				case "Direction": /// 0 zeilenende !!!!
					ViewEast.getInstance().reset();
					String[][] str = new String[][] { { "Winkel:", String.valueOf(((Direction) com).getDegree()) } }; // hier!!!
					String[] tmp = new String[] { "", "" };
					table = new JTable(str, tmp);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					System.out.println("bin ich hier");
					break;
				case "Gear":
					ViewEast.getInstance().reset();
					String[][] str1 = new String[][] { { "Geschwindigkeit:", String.valueOf(((Gear) com).getSpeed()) },
							{ "Dauer:", String.valueOf(((Gear) com).getDuration()) } };
					String[] tmp1 = new String[] { "", "" };
					table = new JTable(str1, tmp1);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					break;
				case "Pause":
					ViewEast.getInstance().reset();
					System.out.println("Bin ich hier irgenwo");
					String[][] str2 = new String[][] { { "Dauer:", String.valueOf(((Pause) com).getDuration()) } };
					String[] tmp2 = new String[] { "", "" };
					table = new JTable(str2, tmp2);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					break;
				case "Repetition":
					ViewEast.getInstance().reset();

					String[][] str3 = new String[][] {
							{ "Anzahl Schritte", String.valueOf(((Repetition) com).getNrSteps()) },
							{ "Wiederholungen", String.valueOf(((Repetition) com).getNrRepetitions()) } };
					String[] tmp3 = new String[] { "", "" };
					table = new JTable(str3, tmp3);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
				default:
					System.out.println("Fehler");
					break;
				}

			}

			public void mouseEntered(MouseEvent arg0) {
			}

			public void mouseExited(MouseEvent arg0) {
			}

			public void mousePressed(MouseEvent arg0) {
			}

			public void mouseReleased(MouseEvent arg0) {
			}

		});

		save.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Command com = c.getControlProcess().get(c.getClm().getSelectedRow());
				
				switch (com.getName()) {
				case "Direction": /// 0 zeilenende !!!!
					
					System.out.println("das ist der wert den ich brauch"+table.getValueAt(0, 1));
					((Direction) com).setDegree((Integer) table.getValueAt(0, 1)); 
					ViewEast.getInstance().setVisible();
					/*
					
					
					ViewEast.getInstance().reset();
					String[][] str = new String[][] { { "Winkel:", String.valueOf(((Direction) com).getDegree()) } }; // hier!!!
					String[] tmp = new String[] { "", "" };
					table = new JTable(str, tmp);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					System.out.println("bin ich hier");*/
					break;
				case "Gear":
					ViewEast.getInstance().reset();
					String[][] str1 = new String[][] { { "Geschwindigkeit:", String.valueOf(((Gear) com).getSpeed()) },
							{ "Dauer:", String.valueOf(((Gear) com).getDuration()) } };
					String[] tmp1 = new String[] { "", "" };
					table = new JTable(str1, tmp1);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					break;
				case "Pause":
					ViewEast.getInstance().reset();
					System.out.println("Bin ich hier irgenwo");
					String[][] str2 = new String[][] { { "Dauer:", String.valueOf(((Pause) com).getDuration()) } };
					String[] tmp2 = new String[] { "", "" };
					table = new JTable(str2, tmp2);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
					break;
				case "Repetition":
					ViewEast.getInstance().reset();

					String[][] str3 = new String[][] {
							{ "Anzahl Schritte", String.valueOf(((Repetition) com).getNrSteps()) },
							{ "Wiederholungen", String.valueOf(((Repetition) com).getNrRepetitions()) } };
					String[] tmp3 = new String[] { "", "" };
					table = new JTable(str3, tmp3);
					jcp = new JScrollPane(table);
					ViewEast.getInstance().add(jcp);

					ViewEast.getInstance().setVisible();
				default:
					System.out.println("Fehler");
					break;
				}
				//table.getValueAt(1, 1); // holt geänderten wert
				// c.getControlProcess().get() =new Direction();
				// (Direction)c.getControlProcess().get(1);
			}
		});

		b.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent a) {
				// System.out.println(c.getControlProcess().get(c.getClm().getSelectedRow()).toString());
				// String[] parts =
				// c.getControlProcess().get(c.getClm().getSelectedRow()).toString().split(":");
				// String[] werte = parts[1].split(".");
				// System.out.println(parts[0]);
				// table.setVisible(false);
				ViewEast.getInstance().reset();
				String[][] str5 = new String[][] { { "Richtung:", "dddd" } };
				String[] tmp5 = new String[] { "", "" };
				table1 = new JTable(str5, tmp5);
				jcp = new JScrollPane(table1);
				System.out.println("hier war ich auch");
				// ViewEast.getInstance().remove(table);
				// ViewEast.getInstance().remove(table);
				ViewEast.getInstance().add(jcp);
				// ViewEast.getInstance().setVisibletable();
				// ViewEast.getInstance().add(new JScrollPane(table1));
				ViewEast.getInstance().setVisible(false);
				ViewEast.getInstance().setVisible(true);

				// System.out.println("hier" +c.getClm().getSelectedRow());

				/*
				 * String[][] str = new String[][]{{"Richtung:", werte[0]}};
				 * String[] tmp = new String[]{""}; table=new JTable(str, tmp);
				 * add(new JScrollPane(table), BorderLayout.SOUTH);
				 */
				// fireTableDataChanged();

				// System.out.println("Tada");
				// System.out.println(table.getSelectedRow());
				// txt.setText(st[table.getSelectedRow()].toString());
				// cm.getControlProcess().add(new
				// CommandType(st[l.getSelectedIndex()].toString()).createInstance());

			}
		});
		// setBackground(Color.BLACK);
	}

	/**
	 * Erzeugt ein Objekt von ConrolModel, wenn noch keins vorhanden ist.
	 * 
	 * @return Gibt genau eine Instanz von ControlModel zurück.
	 */

	public static ViewEast getInstance() {
		if (instance == null) {
			instance = new ViewEast();
			return instance;
		} else
			return instance;
	}

	public void setVisible() {
		System.out.println("hier auch?");
		ViewEast.getInstance().setVisible(false);
		ViewEast.getInstance().setVisible(true);
	}

	public void reset() {
		System.out.println("test");
		this.remove(jcp);
	}
}
